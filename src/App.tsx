import React, { useEffect, useState } from 'react';
import { Play, Pause, Music, Gamepad2, Heart, User } from 'lucide-react';

function App() {
  const [isLoaded, setIsLoaded] = useState(false);
  const [currentTrack, setCurrentTrack] = useState(null);
  const [isPlaying, setIsPlaying] = useState(false);

  useEffect(() => {
    setIsLoaded(true);
  }, []);

  const musicTracks = [
    { id: 1, title: "B√†i h√°t y√™u th√≠ch #1", artist: "T√™n ngh·ªá sƒ©", duration: "3:45" },
    { id: 2, title: "B√†i h√°t y√™u th√≠ch #2", artist: "T√™n ngh·ªá sƒ©", duration: "4:12" },
    { id: 3, title: "B√†i h√°t y√™u th√≠ch #3", artist: "T√™n ngh·ªá sƒ©", duration: "3:28" },
  ];

  const favoriteGames = [
    { id: 1, title: "Game y√™u th√≠ch #1", genre: "RPG", status: "ƒêang ch∆°i" },
    { id: 2, title: "Game y√™u th√≠ch #2", genre: "Action", status: "Ho√†n th√†nh" },
    { id: 3, title: "Game y√™u th√≠ch #3", genre: "Strategy", status: "ƒêang ch∆°i" },
  ];

  const togglePlay = (trackId) => {
    if (currentTrack === trackId && isPlaying) {
      setIsPlaying(false);
    } else {
      setCurrentTrack(trackId);
      setIsPlaying(true);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-800">
      {/* Animated background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute top-1/4 left-1/4 w-64 h-64 bg-yellow-500/5 rounded-full blur-3xl animate-pulse" />
        <div className="absolute bottom-1/4 right-1/4 w-80 h-80 bg-yellow-400/3 rounded-full blur-3xl animate-pulse" style={{ animationDelay: '3s' }} />
      </div>

      <div className="relative z-10 max-w-4xl mx-auto px-6 py-12">
        
        {/* Header - Gi·ªõi thi·ªáu */}
        <section className="text-center mb-16">
          <div 
            className={`transition-all duration-1000 ${
              isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
            }`}
          >
            {/* Avatar */}
            <div className="w-32 h-32 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full mx-auto mb-8 flex items-center justify-center shadow-2xl border-4 border-yellow-500/30">
              <User size={48} className="text-black" />
            </div>
            
            <h1 className="text-4xl md:text-6xl font-bold text-white mb-4">
              Xin ch√†o! üëã
            </h1>
            <h2 className="text-2xl md:text-3xl text-yellow-400 font-semibold mb-6">
              T√¥i l√† [T√™n c·ªßa b·∫°n]
            </h2>
            
            <p className="text-lg md:text-xl text-gray-300 max-w-2xl mx-auto leading-relaxed">
              Ch√†o m·ª´ng ƒë·∫øn v·ªõi kh√¥ng gian c√° nh√¢n c·ªßa t√¥i! N∆°i t√¥i chia s·∫ª nh·ªØng game v√† √¢m nh·∫°c y√™u th√≠ch. 
              H√£y c√πng kh√°m ph√° nh·ªØng ƒëi·ªÅu th√∫ v·ªã nh√©! ‚ú®
            </p>
          </div>
        </section>

        {/* V·ªÅ t√¥i - ƒê∆°n gi·∫£n */}
        <section 
          className={`mb-16 transition-all duration-1000 delay-300 ${
            isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 border border-yellow-500/20">
            <h3 className="text-2xl font-bold text-yellow-400 mb-4 flex items-center">
              <Heart className="mr-3" size={24} />
              M·ªôt ch√∫t v·ªÅ t√¥i
            </h3>
            <p className="text-gray-300 text-lg leading-relaxed">
              T√¥i l√† m·ªôt ng∆∞·ªùi ƒëam m√™ game v√† √¢m nh·∫°c. Th√≠ch kh√°m ph√° nh·ªØng tr√≤ ch∆°i m·ªõi, 
              nghe nh·∫°c trong l√∫c r·∫£nh r·ªói v√† chia s·∫ª nh·ªØng tr·∫£i nghi·ªám th√∫ v·ªã v·ªõi m·ªçi ng∆∞·ªùi. 
              Cu·ªôc s·ªëng ƒë∆°n gi·∫£n nh∆∞ng ƒë·∫ßy m√†u s·∫Øc! üéÆüéµ
            </p>
          </div>
        </section>

        {/* Game y√™u th√≠ch */}
        <section 
          className={`mb-16 transition-all duration-1000 delay-500 ${
            isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 border border-yellow-500/20">
            <h3 className="text-2xl font-bold text-yellow-400 mb-6 flex items-center">
              <Gamepad2 className="mr-3" size={24} />
              Game y√™u th√≠ch c·ªßa t√¥i
            </h3>
            
            <div className="grid gap-4">
              {favoriteGames.map((game, index) => (
                <div 
                  key={game.id}
                  className="bg-black/30 p-6 rounded-xl border border-yellow-500/10 hover:border-yellow-500/30 hover:bg-yellow-500/5 transition-all duration-300 group"
                  style={{ animationDelay: `${index * 200}ms` }}
                >
                  <div className="flex items-center justify-between">
                    <div>
                      <h4 className="text-xl font-semibold text-white group-hover:text-yellow-400 transition-colors">
                        {game.title}
                      </h4>
                      <p className="text-gray-400 mt-1">Th·ªÉ lo·∫°i: {game.genre}</p>
                    </div>
                    <div className="text-right">
                      <span className={`px-3 py-1 rounded-full text-sm ${
                        game.status === 'ƒêang ch∆°i' 
                          ? 'bg-green-500/20 text-green-400 border border-green-500/30' 
                          : 'bg-blue-500/20 text-blue-400 border border-blue-500/30'
                      }`}>
                        {game.status}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* √Çm nh·∫°c y√™u th√≠ch */}
        <section 
          className={`mb-16 transition-all duration-1000 delay-700 ${
            isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-2xl p-8 border border-yellow-500/20">
            <h3 className="text-2xl font-bold text-yellow-400 mb-6 flex items-center">
              <Music className="mr-3" size={24} />
              √Çm nh·∫°c y√™u th√≠ch
            </h3>
            
            <div className="space-y-4">
              {musicTracks.map((track, index) => (
                <div 
                  key={track.id}
                  className="bg-black/30 p-4 rounded-xl border border-yellow-500/10 hover:border-yellow-500/30 hover:bg-yellow-500/5 transition-all duration-300 group"
                  style={{ animationDelay: `${index * 200}ms` }}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <button
                        onClick={() => togglePlay(track.id)}
                        className="w-12 h-12 bg-yellow-500/20 rounded-full flex items-center justify-center hover:bg-yellow-500/30 transition-all duration-300 group-hover:scale-110"
                      >
                        {currentTrack === track.id && isPlaying ? (
                          <Pause className="text-yellow-400" size={20} />
                        ) : (
                          <Play className="text-yellow-400 ml-1" size={20} />
                        )}
                      </button>
                      <div>
                        <h4 className="text-white font-semibold group-hover:text-yellow-400 transition-colors">
                          {track.title}
                        </h4>
                        <p className="text-gray-400 text-sm">{track.artist}</p>
                      </div>
                    </div>
                    <div className="text-gray-400 text-sm">
                      {track.duration}
                    </div>
                  </div>
                  
                  {/* Progress bar gi·∫£ l·∫≠p */}
                  {currentTrack === track.id && isPlaying && (
                    <div className="mt-3">
                      <div className="w-full bg-gray-700 rounded-full h-1">
                        <div className="bg-yellow-400 h-1 rounded-full animate-pulse" style={{ width: '45%' }}></div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        </section>

        {/* Footer ƒë∆°n gi·∫£n */}
        <footer 
          className={`text-center transition-all duration-1000 delay-900 ${
            isLoaded ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="bg-gray-800/30 backdrop-blur-sm rounded-2xl p-6 border border-yellow-500/10">
            <p className="text-gray-400 mb-2">
              C·∫£m ∆°n b·∫°n ƒë√£ gh√© thƒÉm! üíõ
            </p>
            <p className="text-gray-500 text-sm">
              H√£y c√πng chia s·∫ª nh·ªØng tr·∫£i nghi·ªám th√∫ v·ªã v·ªÅ game v√† √¢m nh·∫°c nh√©!
            </p>
          </div>
        </footer>
      </div>
    </div>
  );
}

export default App;